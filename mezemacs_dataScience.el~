;;; mez-science.el --- Minimal Emacs config for Data Science
;;; Commentary: Configura√ß√£o otimizada para Org-mode, Python e literate programming
;;; Code:

;; ---------------------------
;; üì¶ Reposit√≥rios e use-package
;; ---------------------------

(require 'package)
(setq package-archives
      '(("melpa" . "https://melpa.org/packages/")
        ("org"   . "https://orgmode.org/elpa/")
        ("gnu"   . "https://elpa.gnu.org/packages/")))
(package-initialize)

(unless package-archive-contents
  (package-refresh-contents))

;; Instala use-package se n√£o estiver presente
(unless (package-installed-p 'use-package)
  (package-install 'use-package))
(require 'use-package)
(setq use-package-always-ensure t)

;; ---------------------------
;; ‚¨õ Interface gr√°fica
;; ---------------------------

(setq custom-file (concat user-emacs-directory "./configs/custom_2.el"))
(when (file-exists-p custom-file)
  (load custom-file))
(load-file "~/.emacs.d/configs/dwarfSoftware_theme.el")

(setq inhibit-startup-message t)
(scroll-bar-mode -1)
(tool-bar-mode -1)
(tooltip-mode -1)
(menu-bar-mode -1)
(set-fringe-mode 10)
(setq visible-bell t)
(global-display-line-numbers-mode t)
(column-number-mode)

(set-face-attribute 'default nil :font "FiraCode Nerd Font" :height 140)
(set-face-attribute 'fixed-pitch nil :font "FiraCode Nerd Font" :height 140)
(set-face-attribute 'variable-pitch nil :font "FiraCode Nerd Font" :height 140 :weight 'regular)

(use-package all-the-icons)

(use-package dashboard
  :config
  (dashboard-setup-startup-hook)
  (setq dashboard-startup-banner 'official)
  (setq dashboard-items '((recents  . 5)
                          (projects . 3)))
  (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*"))))

;; ---------------------------
;; üü£ Evil-mode
;; ---------------------------

(use-package evil
  :init (setq evil-want-integration t
              evil-want-keybinding nil)
  :config (evil-mode 1))

;; ---------------------------
;; üß† Org-mode & Literate Programming
;; ---------------------------

(defun efs/org-font-setup ()
  (font-lock-add-keywords 'org-mode
    '(("^ *\\([-]\\) "
       (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "‚Ä¢"))))))
  (add-hook 'org-mode-hook 'visual-line-mode)
  (dolist (face '((org-level-1 . 1.2)
                  (org-level-2 . 1.1)
                  (org-level-3 . 1.05)
                  (org-level-4 . 1.0)))
    (set-face-attribute (car face) nil
                        :font "FiraCode Nerd Font" :weight 'regular :height (* 10 (cdr face))))
  (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))

(defun efs/org-mode-setup ()
  (org-indent-mode)
  (variable-pitch-mode 1)
  (visual-line-mode 1))

(use-package org
  :hook ((org-mode . efs/org-mode-setup)
         (org-mode . efs/org-font-setup))
  :config
  (setq org-ellipsis " ‚ñæ")
  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp :tangle yes"))
  (add-to-list 'org-structure-template-alist '("py" . "src python :tangle yes :results output"))
  (add-to-list 'org-structure-template-alist '("ein" . "src ein-python :session localhost")))

(use-package org-bullets
  :hook (org-mode . org-bullets-mode)
  :custom (org-bullets-bullet-list '("‚óâ" "‚óã" "‚óè" "‚óã" "‚óè" "‚óã" "‚óè")))

(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (python . t)
   (ein . t)))

(add-hook 'org-mode-hook
          (lambda ()
            (add-hook 'after-save-hook #'efs/org-babel-tangle-config nil 'make-it-local)))

(defun efs/org-babel-tangle-config ()
  (when (string-equal (buffer-file-name)
                      (expand-file-name "~/Projects/Code/emacs-from-scratch/Emacs.org"))
    (let ((org-confirm-babel-evaluate nil))
      (org-babel-tangle))))

(custom-set-faces
 '(org-block-begin-line ((t (:box (:line-width 3 :color "purple")
                              :foreground "purple" :background "#46005f" :extend t))))
 '(org-block ((t (:background "#301934" :extend t))))
 '(org-block-end-line ((t (:box (:line-width 3 :color "purple")
                            :foreground "purple" :background "#46005f" :extend t)))))

;; ---------------------------
;; üêç Python e Jupyter
;; ---------------------------

(use-package elpy
  :init (elpy-enable)
  :config
  (setq python-shell-interpreter "python")
  (setq elpy-rpc-python-command "python")
  (add-hook 'python-mode-hook 'pyvenv-mode))

(use-package pyvenv
  :hook (python-mode . pyvenv-mode))

(use-package blacken
  :hook (python-mode . blacken-mode))

(use-package flycheck
  :init (global-flycheck-mode))

(when (executable-find "ipython")
  (setq python-shell-interpreter "ipython")
  (setq python-shell-interpreter-args "-i --simple-prompt"))

(use-package ein)

;; ---------------------------
;; üîÅ Direnv
;; ---------------------------

(use-package direnv
  :config
  (direnv-mode))

;; ---------------------------
(provide 'mez-science)
;;; mez-science.el ends here
